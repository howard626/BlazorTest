@page "/Register"
@inject IJSRuntime JS
@inject NavigationManager navigation
@inject IAuthService authService
@inject HttpClient Http

<h3>註冊帳號</h3>

<EditForm Model="user" OnValidSubmit="SubmitHandlerAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div>
        帳號 : <InputText id="account" @bind-Value="user.Account"></InputText>
    </div>
    <div>
        密碼 : <InputPassword id="password" @bind-Value="user.Password"></InputPassword>
    </div>
    <div>
        確認密碼 : <InputPassword id="password" @bind-Value="user.ConfirmPassword"></InputPassword>
    </div>
    <div>
        名字 : <InputText id="name" @bind-Value="user.Name"></InputText>
    </div>
    <div>
        電話 : <InputText id="phone" @bind-Value="user.Phone"></InputText>
    </div>
    @if (IsSubmit)
    {
        <button class="btn btn-primary" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Loading...</span>
        </button>
    }
    else
    {
        <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6Le7j7AUAAAAAORWIiHLTzHJtrQHOqC9d5GykoEl" OnSuccess="OnSuccess" OnExpired="OnExpired" />
        <button disabled="@DisablePostButton" type="submit" class="btn btn-primary">送出</button>
    }
</EditForm>

@code {
    private RegisterModel user = new RegisterModel();
    private bool IsSubmit = false;

    private void ValidFormSubmitted()
    {
        Console.WriteLine($"{user.Account} / {user.Password}");
    }

    private async Task SubmitHandlerAsync()
    {
        IsSubmit = true;

        string result = await authService.RegisterAsync(user);
        if (string.IsNullOrEmpty(result))
        {
            navigation.NavigateTo("/Login");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", result);
            ServerVerificatiing = false;
            ValidReCAPTCHA = false;
        }

        IsSubmit = false;
    }


    private ReCAPTCHA reCAPTCHAComponent;

    private bool ValidReCAPTCHA = false;

    private bool ServerVerificatiing = false;

    private bool DisablePostButton => !ValidReCAPTCHA || ServerVerificatiing;

    private void OnSuccess()
    {
        ValidReCAPTCHA = true;
    }

    private void OnExpired()
    {
        ValidReCAPTCHA = false;
    }

    private async Task OnClickPost()
    {
        if (ValidReCAPTCHA)
        {
            var response = await reCAPTCHAComponent.GetResponseAsync();
            try
            {
                ServerVerificatiing = true;
                StateHasChanged();
                await Http.PostAsJsonAsync("/api/ReCAPTCHA", new ReCAPTCHAArgs { reCAPTCHAResponse = response });
            }
            catch (HttpRequestException e)
            {
                await JS.InvokeAsync<object>("alert", e.Message);
                ServerVerificatiing = false;
                StateHasChanged();
            }
        }
    }
}
